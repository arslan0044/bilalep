# Generated by Django 5.1.6 on 2025-02-28 10:23

import ckeditor.fields
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('mainapp', '0003_product_productimage'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the category.', max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the category name.', null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the blog post.', max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the post title.', null=True, unique=True)),
                ('content', ckeditor.fields.RichTextField(help_text='The main content of the blog post.')),
                ('excerpt', models.TextField(blank=True, help_text='A short summary of the post (for previews).', null=True)),
                ('featured_image', models.ImageField(blank=True, help_text='Featured image for the post.', null=True, upload_to='blog_images/')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for the featured image (for accessibility).', max_length=255, null=True)),
                ('meta_title', models.CharField(blank=True, help_text='Title for SEO purposes (optional).', max_length=255, null=True)),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for search engines.', null=True)),
                ('meta_keywords', models.CharField(blank=True, help_text='Comma-separated keywords for SEO.', max_length=255, null=True)),
                ('likes', models.PositiveIntegerField(default=0, help_text='Number of likes for the post.')),
                ('views', models.PositiveIntegerField(default=0, help_text='Number of views for the post.')),
                ('allow_comments', models.BooleanField(default=True, help_text='Whether comments are allowed on the post.')),
                ('is_published', models.BooleanField(default=False, help_text='Whether the post is published and visible to users.')),
                ('published_at', models.DateTimeField(blank=True, help_text='Date and time when the post was published.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the post was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the post was last updated.')),
                ('author', models.ForeignKey(help_text='The author of the post.', on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Tags for the post (comma-separated).', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('categories', models.ManyToManyField(blank=True, help_text='Categories associated with the post.', related_name='posts', to='mainapp.category')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='The content of the comment.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the comment was created.')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the comment is approved by the admin.')),
                ('post', models.ForeignKey(help_text='The post this comment belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='mainapp.blogpost')),
                ('user', models.ForeignKey(help_text='The user who made the comment.', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the like was recorded.')),
                ('post', models.ForeignKey(help_text='The post that was liked.', on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to='mainapp.blogpost')),
                ('user', models.ForeignKey(help_text='The user who liked the post.', on_delete=django.db.models.deletion.CASCADE, related_name='user_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('post', 'user')},
            },
        ),
    ]
